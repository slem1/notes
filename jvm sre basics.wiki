
with tmpfs usage and java 8, /tmp mount of the target process is probably not in the same namespace as the bash root process, so you need to move to the target process mount namespace 

usage of tmpfs can be checked with:

`systemctl status tmp.mount`

`nsenter -m -t <PID>`

/tmp mount can be compared with

`cat /proc/self/mountinfo` and `cat /proc/<PID>/mountinfo`. Look at the shared id (shared:N) of /tmp


= JVM Dump =

as same user as jvm process or sudo -u

`sudo -u <JVM_USER> /usr/java/default/bin/jmap -dump:format=b,file=/dump/dump-<PID>-$(hostname).hprof <PID>`

add option live for garbage collection

`sudo -u <JVM_USER> /usr/java/default/bin/jmap -dump:format=b,live,file=/dump/dump-<PID>-$(hostname).hprof <PID>`

= JCMD JVM Dump (recommended) =

`sudo -u <user> jcmd <PID> help <CMD>`

`sudo -u drools jcmd 6183 GC.heap_dump -all /dump/$(date +%Y%m%d%H%M%S)_dump_$(hostname)_6183.hprof`

= JFR =

Start profiling now for 2 minutes

`sudo -u <USER> jcmd <PID> JFR.start name=recording settings=profile delay=0s duration=2m filename=/dump/myrecording.jfr`

== Continuous recording ==

`sudo -u <USER> jcmd <PID> JFR.start name=continuous_recording settings=profile disk=true maxage=5m maxsize=10m dumponexit=true filename=/dump/continuous_recording.jfr`


=== Stop with dump ===
`sudo -u <USER> jcmd <PID> JFR.stop name=recording filename=/dump/recording.jfr`

= async profiler =

`sudo -u <USER> profiler.sh -i 100ms -d 20 -f /home/<USER>/profile-%t.html -o flamegraph <pid>`

= class histogram =

view instance count & size

`sudo -u <USER> jcmd <PID> GC.class_histogram filename=/dump/heap_histogram`
